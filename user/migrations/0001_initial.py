# Generated by Django 5.1.7 on 2025-03-24 13:17

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='菜单名称')),
                ('icon', models.CharField(max_length=32, verbose_name='菜单图标')),
                ('sort', models.IntegerField(blank=True, help_text='排序号序号越大排序越靠前', null=True, verbose_name='排序')),
                ('url', models.CharField(blank=True, max_length=200, null=True, verbose_name='路由地址')),
                ('enable', models.IntegerField(choices=[(0, '隐藏'), (1, '显示')], verbose_name='是否启用')),
                ('type', models.IntegerField(choices=[(1, '目录'), (2, '页面'), (3, '按钮')], verbose_name='权限类型')),
                ('btn_permission', models.CharField(blank=True, choices=[('add', '添加'), ('edit', '编辑'), ('del', '删除')], max_length=8, null=True, verbose_name='按权限标识')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('parent', models.ForeignKey(blank=True, help_text='所属父级菜单,顶级为0', null=True, on_delete=django.db.models.deletion.CASCADE, to='user.menu', verbose_name='所属父级菜单ID')),
            ],
            options={
                'db_table': 'sys_menus',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='角色名称')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('desc', models.CharField(max_length=255, verbose_name='角色描述')),
                ('menus', models.ManyToManyField(blank=True, to='user.menu', verbose_name='拥有的菜单')),
            ],
            options={
                'db_table': 'sys_roles',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=128, verbose_name='用户昵称')),
                ('avatar', models.CharField(max_length=256, verbose_name='头像')),
                ('mobile', models.CharField(blank=True, max_length=11, null=True, verbose_name='手机号')),
                ('qq', models.CharField(blank=True, max_length=32, null=True, verbose_name='qq')),
                ('wx', models.CharField(blank=True, max_length=32, null=True, verbose_name='微信')),
                ('weibo', models.CharField(blank=True, max_length=32, null=True, verbose_name='微博')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('roles', models.ManyToManyField(to='user.role', verbose_name='拥有的所有角色')),
            ],
            options={
                'db_table': 'sys_userinfo',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
